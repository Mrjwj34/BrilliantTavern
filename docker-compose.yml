version: '3.8'

services:
  # PostgreSQL数据库 (带pgvector扩展支持)
  postgres:
    image: pgvector/pgvector:pg15
    container_name: brilliant-tavern-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
    ports:
      - "5432:5432"
    networks:
      - brilliant-tavern-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: brilliant-tavern-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - brilliant-tavern-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端应用
  backend:
    build:
      context: ./backend/brilliant-tavern
      dockerfile: Dockerfile
    container_name: brilliant-tavern-backend
    environment:
      # 服务器配置
      SERVER_PORT: ${SERVER_PORT}
      CONTEXT_PATH: ${CONTEXT_PATH}
      APP_NAME: ${APP_NAME}
      # 数据库配置
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      # Redis配置
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      JWT_HEADER: ${JWT_HEADER}
      JWT_TOKEN_PREFIX: ${JWT_TOKEN_PREFIX}
      # Google Cloud Vertex AI配置
      VERTEX_AI_PROJECT_ID: ${VERTEX_AI_PROJECT_ID}
      VERTEX_AI_LOCATION: ${VERTEX_AI_LOCATION}
      VERTEX_AI_MODEL: ${VERTEX_AI_MODEL}
      VERTEX_AI_EMBEDDING_MODEL: ${VERTEX_AI_EMBEDDING_MODEL}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      # 角色记忆配置
      CHARACTER_MEMORY_SIMILARITY_THRESHOLD: ${CHARACTER_MEMORY_SIMILARITY_THRESHOLD}
      CHARACTER_MEMORY_MAX_RESULTS: ${CHARACTER_MEMORY_MAX_RESULTS}
      # TTS服务配置
      TTS_SERVICE_URL: ${TTS_SERVICE_URL}
      TTS_WARMUP_ENABLED: ${TTS_WARMUP_ENABLED}
      TTS_WARMUP_TEXT: ${TTS_WARMUP_TEXT}
      TTS_WARMUP_VOICE_IDS: ${TTS_WARMUP_VOICE_IDS}
      TTS_WARMUP_TIMEOUT: ${TTS_WARMUP_TIMEOUT}
      TTS_WARMUP_DELAY: ${TTS_WARMUP_DELAY}
      # GenAI预热配置
      GENAI_WARMUP_ENABLED: ${GENAI_WARMUP_ENABLED}
      GENAI_WARMUP_TEXT: ${GENAI_WARMUP_TEXT}
      GENAI_WARMUP_TIMEOUT: ${GENAI_WARMUP_TIMEOUT}
      GENAI_WARMUP_DELAY: ${GENAI_WARMUP_DELAY}
      GENAI_WARMUP_MAINTAIN_INTERVAL: ${GENAI_WARMUP_MAINTAIN_INTERVAL}
      # CORS配置
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS}
      CORS_MAX_AGE: ${CORS_MAX_AGE}
      # WebSocket配置
      WEBSOCKET_ALLOWED_ORIGINS: ${WEBSOCKET_ALLOWED_ORIGINS}
    volumes:
      # 挂载Google Cloud认证配置
      - $HOME/.config/gcloud:/root/.config/gcloud:ro
      # 挂载应用数据和上传目录
      - app_data:/app/data
      - app_uploads:/app/uploads
    ports:
      - "8080:8080"
    networks:
      - brilliant-tavern-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: brilliant-tavern-frontend
    volumes:
      - frontend_dist:/app/dist
    networks:
      - brilliant-tavern-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: brilliant-tavern-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_dist:/var/www/html:ro
      - app_uploads:/var/www/html/uploads:ro
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    networks:
      - brilliant-tavern-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Fish Speech TTS服务 (可选)
  fish-speech:
    image: fishaudio/fish-speech:latest
    container_name: brilliant-tavern-tts
    ports:
      - "9880:9880"
    volumes:
      - tts_models:/app/models
      - tts_data:/app/data
    networks:
      - brilliant-tavern-network
    profiles:
      - tts
    environment:
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_uploads:
    driver: local
  frontend_dist:
    driver: local
  tts_models:
    driver: local
  tts_data:
    driver: local

networks:
  brilliant-tavern-network:
    driver: bridge